// Generated by IcedCoffeeScript 108.0.13
(function() {
  var deep_clone, prettyjson, timer, util, v, we_are_in_the_browser, _i, _len, _log10, _log2, _ref,
    __slice = [].slice;

  we_are_in_the_browser = typeof window !== "undefined" && window !== null;

  global = window;

  window.p = console.log.bind(console);

  window.puts = console.log.bind(console);

  window.pe = console.error.bind(console);

  window.perr = console.error.bind(console);

  window.print = function(t) {
    return process.stdout.write((t != null ? t.toString() : void 0) || JSON.stringify(t));
  };

  window.println = console.log;

  timer = null;

  window.tic = function() {
    return timer = new Date;
  };

  window.toc = function() {
    return (new Date - timer) / 1000;
  };

  window.ptoc = function() {
    return console.log(toc().toFixed(3) + ' s');
  };

  global.pp = function(t) {
    return console.log(prettyjson.render(t));
  };

  if (!we_are_in_the_browser) {
    util = require('util');
    global.insp = function(a, depth) {
      if (depth == null) {
        depth = 2;
      }
      return p(util.inspect(a, {
        colors: true,
        depth: depth
      }));
    };
  }

  String.prototype.reverse = function() {
    return this.split('').reverse().join('');
  };

  String.prototype.capitalize = function() {
    return this.substr(0, 1).toUpperCase() + this.substr(1);
  };

  String.prototype.ljust = function(length, char) {
    var append;
    if (char == null) {
      char = ' ';
    }
    append = new Array(Math.max(0, length - this.length) + 1).join(char);
    append = append.substr(0, length - this.length);
    return this + append;
  };

  String.prototype.rjust = function(length, char) {
    var append;
    if (char == null) {
      char = ' ';
    }
    append = new Array(Math.max(0, length - this.length) + 1).join(char);
    append = append.substr(0, length - this.length);
    return append + this;
  };

  String.prototype.center = function(length, char) {
    var append, post, pre, req_length;
    if (char == null) {
      char = ' ';
    }
    req_length = Math.floor((length - this.length + 1) / 2);
    append = new Array(Math.max(0, req_length * 2)).join(char);
    append = append.substr(0, req_length);
    pre = append;
    post = append;
    if ((2 * req_length + this.length) > length) {
      post = post.substr(0, req_length - 1);
    }
    return pre + this + post;
  };

  String.prototype.repeat = function(count) {
    var res;
    res = new Array(count + 1);
    return res.join(this);
  };

  Number.prototype.ljust = function(length, char) {
    if (char == null) {
      char = ' ';
    }
    return this.toString().ljust(length, char);
  };

  Number.prototype.rjust = function(length, char) {
    if (char == null) {
      char = ' ';
    }
    return this.toString().rjust(length, char);
  };

  Number.prototype.center = function(length) {
    return this.toString().center(length);
  };

  Number.prototype.repeat = function(count) {
    return this.toString().repeat(count);
  };

  window.call_later = function(cb) {
    return process.nextTick(cb);
  };

  Array.prototype.has = function(t) {
    return -1 !== this.indexOf(t);
  };

  Array.prototype.upush = function(t) {
    if (-1 === this.indexOf(t)) {
      this.push(t);
    }
  };

  if (Array.isArray == null) {
    Array.isArray = function(obj) {
      return obj instanceof Array;
    };
  }

  Array.prototype.clone = Array.prototype.slice;

  Array.prototype.clear = function() {
    return this.length = 0;
  };

  Array.prototype.idx = Array.prototype.indexOf;

  Array.prototype.remove_idx = function(idx) {
    if (idx < 0 || idx >= this.length) {
      return this;
    }
    this.splice(idx, 1);
    return this;
  };

  Array.prototype.fast_remove = function(t) {
    var idx;
    idx = this.indexOf(t);
    if (idx === -1) {
      return;
    }
    this[idx] = this[this.length - 1];
    this.pop();
    return this;
  };

  Array.prototype.fast_remove_idx = function(idx) {
    if (idx < 0 || idx >= this.length) {
      return this;
    }
    this[idx] = this[this.length - 1];
    this.pop();
    return this;
  };

  Array.prototype.remove = function(t) {
    this.remove_idx(this.idx(t));
    return this;
  };

  Array.prototype.last = Array.prototype.end = function() {
    return this[this.length - 1];
  };

  Array.prototype.insert_after = function(idx, t) {
    this.splice(idx + 1, 0, t);
    return t;
  };

  Array.prototype.append = function(list) {
    var v, _i, _len;
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      v = list[_i];
      this.push(v);
    }
    return this;
  };

  Array.prototype.uappend = function(list) {
    var v, _i, _len;
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      v = list[_i];
      this.upush(v);
    }
    return this;
  };

  window.h_count = window.count_h = window.hash_count = window.count_hash = function(t) {
    var k, ret;
    ret = 0;
    for (k in t) {
      ret++;
    }
    return ret;
  };

  window.is_object = function(t) {
    return t === Object(t);
  };

  window.obj_set = function(dst, src) {
    var k, v;
    for (k in src) {
      v = src[k];
      dst[k] = v;
    }
    return dst;
  };

  window.obj_clear = function(t) {
    var k, v;
    for (k in t) {
      v = t[k];
      delete t[k];
    }
    return t;
  };

  Array.prototype.set = function(t) {
    var k, v, _i, _len;
    this.length = t.length;
    for (k = _i = 0, _len = t.length; _i < _len; k = ++_i) {
      v = t[k];
      this[k] = v;
    }
    return this;
  };

  window.arr_set = function(dst, src) {
    var k, v, _i, _len;
    dst.length = src.length;
    for (k = _i = 0, _len = src.length; _i < _len; k = ++_i) {
      v = src[k];
      dst[k] = v;
    }
    return dst;
  };

  window.array_merge = window.arr_merge = function() {
    var a, r, _i, _len;
    r = [];
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      a = arguments[_i];
      r = r.concat(a);
    }
    return r;
  };

  window.obj_merge = function() {
    var a, k, ret, v, _i, _len;
    ret = {};
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      a = arguments[_i];
      for (k in a) {
        v = a[k];
        ret[k] = v;
      }
    }
    return ret;
  };

  RegExp.escape = function(text) {
    return text.replace(/[-\/[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  };

  Function.prototype.sbind = function() {
    var athis, main_rest, ret, __this;
    athis = arguments[0], main_rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    __this = this;
    ret = function() {
      var rest;
      rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return __this.apply(athis, main_rest.concat(rest));
    };
    ret.call = function() {
      var rest, _new_athis;
      _new_athis = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return __this.apply(_new_athis, main_rest.concat(rest));
    };
    ret.apply = function(_new_athis, rest) {
      return __this.apply(_new_athis, main_rest.concat(rest));
    };
    return ret;
  };

  window.clone = function(t) {
    var k, ret, v;
    if (t !== Object(t)) {
      return t;
    }
    if (Array.isArray(t)) {
      return t.slice();
    }
    ret = {};
    for (k in t) {
      v = t[k];
      ret[k] = v;
    }
    return ret;
  };

  window.deep_clone = deep_clone = function(t) {
    var k, res, v, _i, _len;
    if (t !== Object(t)) {
      return t;
    }
    if (Array.isArray(t)) {
      res = [];
      for (_i = 0, _len = t.length; _i < _len; _i++) {
        v = t[_i];
        res.push(deep_clone(v));
      }
      return res;
    }
    res = {};
    for (k in t) {
      v = t[k];
      res[k] = deep_clone(v);
    }
    return res;
  };

  _log2 = Math.log(2);

  _log10 = Math.log(10);

  if (Math.log2 == null) {
    Math.log2 = function(t) {
      return Math.log(t) / _log2;
    };
  }

  if (Math.log10 == null) {
    Math.log10 = function(t) {
      return Math.log(t) / _log10;
    };
  }

  _ref = 'abs min max sqrt log round ceil floor log2 log10'.split(' ');
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    v = _ref[_i];
    global[v] = Math[v];
  }

}).call(this);
