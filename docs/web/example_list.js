// Generated by IcedCoffeeScript 108.0.13
(function() {
  window.example_list = [
    {
      title: '--- select example ---',
      code: ''
    }, {
      title: 'int arithmetic',
      code: 'pragma solidity ^0.5.11;\n\ncontract Arith {\n  int public value;\n  \n  function arith() public returns (int yourMom) {\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    c = -c;\n    c = a + b;\n    c = a - b;\n    c = a * b;\n    c = a / b;\n    return c;\n  }\n}'
    }, {
      title: 'uint arithmetic',
      code: 'pragma solidity ^0.5.11;\n\ncontract Arith {\n  uint public value;\n  \n  function arith() public returns (uint yourMom) {\n    uint a = 0;\n    uint b = 0;\n    uint c = 0;\n    c = a + b;\n    c = a * b;\n    c = a / b;\n    c = a | b;\n    c = a & b;\n    c = a ^ b;\n    return c;\n  }\n}'
    }, {
      title: '--- control flow ---',
      code: ''
    }, {
      title: 'if',
      code: 'pragma solidity ^0.5.11;\n\ncontract Ifer {\n  uint public value;\n  \n  function ifer() public returns (uint) {\n    uint x = 6;\n\n    if (x == 5) {\n        x += 1;\n    }\n    else {\n        x += 10;\n    }\n\n    return x;\n  }\n}'
    }, {
      title: 'for',
      code: 'pragma solidity ^0.5.11;\n\ncontract Forer {\n  uint public value;\n  \n  function forer() public returns (uint yourMom) {\n    uint y = 0;\n    for (uint i=0; i<5; i+=1) {\n        y += 1;\n    }\n    return y;\n  }\n} '
    }, {
      title: 'while',
      code: 'pragma solidity ^0.5.11;\n\ncontract Whiler {\n  uint public value;\n  \n  function whiler() public returns (uint yourMom) {\n    uint y = 0;\n    while (y != 2) {\n        y += 1;\n    }\n    return y;\n  }\n} '
    }, {
      title: '--- function capabilities ---',
      code: ''
    }, {
      title: 'fn call',
      code: 'pragma solidity ^0.5.11;\n\ncontract Fn_call {\n  int public value;\n  \n  function fn1(int a) public returns (int yourMom) {\n    value += 1;\n    return a;\n  }\n  function fn2() public returns (int yourMom) {\n    fn1(1);\n    int res = 1;\n    return res;\n  }\n}'
    }, {
      title: '--- near-real examples ---',
      code: ''
    }, {
      title: 'simplecoin',
      code: 'pragma solidity ^0.5.11;\n\ncontract Coin {\n    address minter;\n    mapping (address => uint) balances;\n    \n    constructor() public {\n        minter = msg.sender;\n    }\n    function mint(address owner, uint amount) public {\n        if (msg.sender == minter) {\n            balances[owner] += amount;\n        }\n    }\n    function send(address receiver, uint amount) public {\n        if (balances[msg.sender] >= amount) {\n            balances[msg.sender] -= amount;\n            balances[receiver] += amount;\n        }\n    }\n    function queryBalance(address addr) public view returns (uint balance) {\n        return balances[addr];\n    }\n}'
    }
  ];

}).call(this);
